"Document Title",Authors,"Author Affiliations","Publication Title",Date Added To Xplore,"Publication Year","Volume","Issue","Start Page","End Page","Abstract","ISSN",ISBNs,"DOI",Funding Information,PDF Link,"Author Keywords","IEEE Terms","Mesh_Terms",Article Citation Count,Patent Citation Count,"Reference Count","License",Online Date,Issue Date,"Meeting Date","Publisher",Document Identifier
"Computer Science Unplugged for Developing Computational Thinking and Mathematical Thinking","T. Nakamura; T. Kawasaki","Graduate School of Education, Gifu university, Gifu, Japan; Faculty of Education, Gifu University, Gifu, Japan","2019 International Joint Conference on Information, Media and Engineering (IJCIME)","16 Apr 2020","2019","","","305","308","The purpose of this study is to make learning material that can develop both Computational thinking and Mathematical thinking. This study suggest a hamburger flowchart as a teaching material that combines the three elements of ""unplugged"", ""thinking from the end "" and ""mathematics class"". Using this flowchart, basic experiment was conducted for 8 to 12 years old. The purpose of this experiment is to confirm whether it is possible for children to develop both Computational thinking and Mathematical thinking by using the hamburger flowchart. We evaluated both Computational thinking and Mathematical thinking from the state in this class and the content of the worksheet and prior and subsequent tests. As a result, the state related to Computational thinking and Mathematical thinking increased, and the correct answer rate of many children increased from the prior test to the subsequent test. Therefore it turned out that the hamburger flowchart affects mathematical thinking.","","978-1-7281-5586-9","10.1109/IJCIME49369.2019.00108","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9066359","21st-century-skills;Computational-thinking;Mathematical-thinking;thinking-from-the-end","Flowcharts;Programming profession;Tools;Education;Sugar;Toxicology","","3","","6","IEEE","16 Apr 2020","","","IEEE","IEEE Conferences"
"Mapping computational thinking mindsets between educational levels with cognitive network science","M. Stella; A. Kapuza; C. Cramer; S. Uzzo; V. Latora","CogNosco Lab, Department of Computer Science, University of Exeter, Stocker Road EX4 4PY, UK and Complex Science Consulting, Via Amilcare Foscarini 2, 73100 Lecce, Italy; m.stella@exeter.ac.uk; National Research University Higher School of Economics, Myasnitskaya 20, 101000 Moscow, Russian Federation; Woods Hole Institute, Woods Hole, MA, USA; New York Hall of Science, Corona, NY, USA; NA",Journal of Complex Networks,"18 Jan 2022","2021","9","6","1","13","A significant aspect of computational thinking is as a way of reasoning about the world in terms of data. This mindset channels number-crunching toward an ambition to discover knowledge through logic, models and simulations. Here we show how computational cognitive science can be used to reconstruct and analyse the structure of computational thinking mindsets (forma mentis in Latin) through complex networks. As a case study, we investigate cognitive networks tied to key concepts of computational thinking provided by (i) 159 high school students enrolled in a science curriculum and (ii) 59 researchers in complex systems and simulations. Researchers' reconstructed knowledge highlighted a positive mindset about scientific modelling, semantically framing data and simulations as ways of discovering nature. Students correctly identified different aspects of logic reasoning but perceived ‘computation’ as a distressing, anxiety-eliciting task, framed with math jargon and lacking links to real-world discovery. Students' mindsets around ‘data’, ‘model’ and ‘simulations’ critically revealed no awareness of numerical modelling as a way for understanding the world. Our findings provide evidence of a crippled computational thinking mindset in students, who acquire mathematical skills that are not channelled toward real-world discovery through coding. This unlinked knowledge ends up being perceived as distressing number-crunching expertise with no relevant outcome. The virtuous mindset of researchers reported here indicates that computational thinking can be restored by training students specifically in coding, modelling and simulations in relation to discovering nature. Our approach opens innovative ways for quantifying computational thinking and enhancing its development through mindset reconstruction.","2051-1329","","10.1093/comnet/cnab020","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9684795","computational thinking;cognitive network science;mindset reconstruction;education","","","","","","","18 Jan 2022","","","OUP","OUP Journals"
"Performance-based evaluation of computational thinking skills using machine learning","E. Karakaş; M. Turhan Yöndem","Mühendislik Fakültesi, İstanbul Okan Üniversitesi, İstanbul, TÜRKİYE; Mühendislik Fakültesi, İstanbul Okan Üniversitesi, İstanbul, TÜRKİYE",2020 Turkish National Software Engineering Symposium (UYMS),"9 Nov 2020","2020","","","1","5","This thesis study is an evaluation tool that measures the user's Computational Thinking (CT) according to its performance on Block-Based Programming Languages (BBPL) by using Machine Learning Techniques. The evaluation tool makes an evaluation for Machine Learning Model and each of the Computational Thinking seven fields. Via this developed tool, the objective is to product an alternative to the limited evaluation tools on Block-Based Programming Languages. Literature research was brought out in two sides as Machine Learning and Block-Based Programming Languages. In the first stage, on Machine Learning, the data set and the methods used in educational field were researched. In the second stage, the devices which are used to measure the performance on Block- Based Programming Languages were analyzed. On literature, there are various sources for teaching Computational Thinking ,but it occurs that measuring instruments that evaluates Computational Thinking are inadequate. To evaluate Computational Thinking a machine learning model was trained. Trained model was turned into online evaluation tool by which both the tutors and the students evaluate Computational Thinking easily. In the final stage, the developed online evaluation tool and the outcome was analyzed.","","978-1-7281-8541-5","10.1109/UYMS50627.2020.9247066","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9247066","Machine Learning;Block-Based Programming Languages;Computational Thinking","Performance evaluation;Computer languages;Computational modeling;Machine learning;Tools;Programming profession;Software engineering","","","","19","IEEE","9 Nov 2020","","","IEEE","IEEE Conferences"
"Exploration of ability development of engineering and computational thinking skills in software engineering majors","Z. Deng; W. Huang; R. Dong; P. Wen","School of Computer Science and Control, Guilin University of Electronic Technology, China; School of Computer Science and Control, Guilin University of Electronic Technology, China; School of Computer Science and Control, Guilin University of Electronic Technology, China; School of Computer Science and Control, Guilin University of Electronic Technology, China",2009 4th International Conference on Computer Science & Education,"1 Sep 2009","2009","","","1665","1668","Software talents should have the engineering ability, a common sense in IT industry, which is characterized by the fact that design plays a very important role in software engineering. Basis on the enhancement of computational thinking, the reform ideas of the development of the student's engineering ability are introduced. The detailed approaches include: 1) Extraction of fundamental discipline concept of engineering ability development; 2) Problem solving-centered organization of courses of software development tools; 3) Initiate the courses of software engineering as soon as possible; 4) Continual training of abstract logical thinking for the purpose of software abstract thinking.","","978-1-4244-3520-3","10.1109/ICCSE.2009.5228288","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5228288","software engineering;Computational thinking;design;abstract","Software engineering;Software systems;Design engineering;Programming;Computer science;Computer science education;Application software;Engineering management;Educational technology;Computer industry","","1","","7","IEEE","1 Sep 2009","","","IEEE","IEEE Conferences"
"Enhancing Computational Strategies to Decode ChatGPT’s Influence on the Critical Thinking Abilities of University Students","Gunawan; S. Palupi; R. Hardi; A. S. Pribadi; R. Zulkarnain; M. N. Setiawan; N. W. W. Sari; Sulistiyanto; D. T. Utomo","Department of Informatics, Universitas Mulia, Balikpapan, Indonesia; Department of Information Systems, Universitas Mulia, Balikpapan, Indonesia; Department of Informatics, Universitas Mulia, Balikpapan, Indonesia; Department of Law, Universitas Mulia, Balikpapan, Indonesia; Department of Information Systems, Universitas Mulia, Balikpapan, Indonesia; Department of Informatics, Universitas Mulia, Balikpapan, Indonesia; Department of Informatics, Universitas Mulia, Balikpapan, Indonesia; Department of Engineering, Universitas Nurul Jadid, Probolinggo, Indonesia; Department of Information Technology, Politeknik Negeri Jember, Jember, Indonesia",2024 4th International Conference of Science and Information Technology in Smart Administration (ICSINTESA),"14 Nov 2024","2024","","","27","32","The integration of artificial intelligence (AI) tools such as ChatGPT into educational contexts is reshaping the landscape of student learning and critical thinking. This study investigates the influence of ChatGPT on the critical thinking abilities of university students by enhancing computational strategies for analysis. We developed an advanced computational framework that leverages natural language processing (NLP) and machine learning (ML) techniques to evaluate the interaction between students and ChatGPT. Our approach involves the collection and analysis of large-scale interaction data to identify patterns and impacts on critical thinking development. We employed sentiment analysis, topic modeling, and argumentation mining to decode the nature of student responses and their evolution over time. The results reveal significant improvements in critical thinking skills among students who actively engage with ChatGPT, suggesting that the AI can act as a catalyst for developing higher-order thinking skills. This study contributes to the growing body of research on AI in education by providing insights into the mechanisms through which AI tools can enhance critical thinking, and proposes practical implications for integrating such tools into academic curricula. The findings support the notion that computational analysis can provide a nuanced understanding of AI’s educational impacts, paving the way for more effective AI-assisted learning environments.","","979-8-3503-7611-1","10.1109/ICSINTESA62455.2024.10748139","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10748139","Artificial intelligence;ChatGPT;critical thinking;computational strategies;natural language processing;machine learning;education","Sentiment analysis;Analytical models;Technological innovation;Computational modeling;Education;Machine learning;Learning (artificial intelligence);Chatbots;Data mining;Information technology","","","","17","IEEE","14 Nov 2024","","","IEEE","IEEE Conferences"
"A Guide Towards a Definition of Computational Thinking in K-12","R. Ismail; T. A. Steinbach; C. S. Miller","College of Computing and Digital Media (CDM), DePaul University, Chicago, USA; College of Computing and Digital Media (CDM), DePaul University, Chicago, USA; College of Computing and Digital Media (CDM), DePaul University, Chicago, USA",2022 IEEE Global Engineering Education Conference (EDUCON),"11 May 2022","2022","","","801","810","Computational thinking (CT) has been described as a set of valuable skills for tackling complex problems. To foster CT among K-12 students, different initiatives have been introduced by governmental and non-governmental entities, and numerous studies have been carried out by researchers to define and integrate CT into school curriculum. However, previous studies has shown little agreement among researchers, governmental and non-governmental sectors about a unified CT definition. These dissensions have introduced challenges in formulating a definition for CT at the K-12 level. The absence of a unified definition may increase the challenges for teachers to teach and integrate CT into school curriculum. To foster CT among K-12 students, we introduce a definition and framework for CT. We evaluated 39 articles and extracted the most common elements used in the literature to frame CT definition and describe its elements. Several studies have discussed, as well as investigated, the significance of conceptualizing and comprehending the interaction and dependency relationships among computational objects. However, our literature review discovered that little attention has been dedicated to the concept of dependency in the CT body of knowledge. Based on the literature review, we define CT as the thought process used for solving problems, and it encompasses the elements of problem decomposition, abstraction, and algorithmic thinking. We conjecture the CT definition is missing the element of dependency. In the context of CT, we define dependency as the knowledge of comprehending the interrelationships between different sections of a decomposed problem.","2165-9567","978-1-6654-4434-7","10.1109/EDUCON52537.2022.9766703","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9766703","Computational Thinking (CT);K-12 Education;Dependency;Abstraction;Decomposition;Algorithmic Thinking","Computer science;Bibliographies;Conferences;Computational modeling;Engineering education","","","","69","IEEE","11 May 2022","","","IEEE","IEEE Conferences"
"The AProS Project: Strategic Thinking & Computational Logic","W. Sieg",NA,Logic Journal of the IGPL,"18 Jan 2018","2007","15","4","359","368","The paper discusses tools for teaching logic used in Logic & Proofs, a web-based introduction to modern logic that has been taken by more than 1,300 students since the fall of 2003. The tools include a wide array of interactive learning environments or cognitive mini-tutors; most important among them is the Carnegie Proof Lab. The Proof Lab is a sophisticated interface for constructing natural deduction proofs and is central, as strategically guided discovery of proofs is the distinctive focus of the course. My discussion makes explicit the broader intellectual context, but also the pursuit of pedagogical goals and their experimental examination. The intellectual context includes i) the theoretical background for the proof search algorithm AProS and its use for a dynamic Proof Tutor, and ii) the programmatic expansion of the course to Computational Logic. (I recommend that the reader enter the virtual classroom of Logic & Proofs: the interactive components just cannot be properly reflected in a narrative. It is also very easy to download AProS and observe its ways of searching for proofs.) 1","1368-9894","","10.1093/jigpal/jzm026","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8131700","introduction to logic;strategic thinking;automated proof search;dynamic proof tutor;Carnegie Proof Lab;Open Learning Initiative (OLI);intercalation calculus;natural deduction proof","","","","","","","18 Jan 2018","","","OUP","OUP Journals"
"Fostering computational thinking skills with a tangible blocks programming environment","T. Turchi; A. Malizia","Human Centred Design Institute, Brunel University London, United Kingdom; Human Centred Design Institute, Brunel University London, United Kingdom",2016 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC),"10 Nov 2016","2016","","","232","233","Computational Thinking has recently returned into the limelight as an essential skill to have for both the general public and disciplines outside Computer Science. It encapsulates those thinking skills integral to solving complex problems using a computer, thus widely applicable in our technological society. Several public initiatives such as the Hour of Code successfully introduced it to millions of people of different ages and backgrounds, mostly using Blocks Programming Environments like Scratch that lower the barriers of programming and facilitate learning. In this paper we present our arguments for fostering Computational Thinking skills using a Blocks Programming Environment augmented with a Tangible User Interface, namely by exploiting objects whose interactions with the physical environment are mapped to digital actions performed on the system. Our demonstration includes a working prototype implementing our Tangible Blocks Programming Environment called TAPAS.","1943-6106","978-1-5090-0252-8","10.1109/VLHCC.2016.7739692","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7739692","Computational Thinking;Tangible User Interface;End-User Programming","Programming environments;Visualization;Programming profession;Encoding;Concrete","","13","","13","IEEE","10 Nov 2016","","","IEEE","IEEE Conferences"
"The effects of constructing robot-based storytelling system on college students' computational thinking skill and technology comprehension","C. -C. Hu; M. -H. Chen; I. Yuadi; N. -S. Chen","Department of Information Management, Tatung University No.40, Sec. 3, Zhongshan N. Rd., Taipei City, Taiwan; Department of Information Management, Tatung University No.40, Sec. 3, Zhongshan N. Rd., Taipei City, Taiwan; Department of Information and Library Science, Airlangga University Jl. Airlangga 4-6, Surabaya, Indonesia; Institute for Research Excellence in Learning Sciences and Program of Learning Sciences, National Taiwan Normal University 162, Section 1, Heping E. Rd., Taipei City, Taiwan",2022 24th International Conference on Advanced Communication Technology (ICACT),"11 Mar 2022","2022","","","496","500","Recent college students have been observed to be motivated and engaged in acquiring information and communication technology (ICT) knowledge and skills with robots and digital media. The purpose of this study is to develop students’ technology comprehension through a learning activity by constructing robot-based storytelling systems. A sample of 15 college students participated in the program. Data collected include the pre-and post-computational thinking tests (CTt) and computational thinking skill (CTs) tests for evaluating their learning effects of technology comprehension (TC) in terms of computational thinking knowledge and skills and their perceptions toward the robot-based storytelling development environment and learning activities. The results show that the learning activities were an effective approach for enhancing the students’ TC as shown in the post-test. The differences between the students’ CT and perceptions were also confirmed. The results revealed that the learning activities with the robot-based storytelling development environment could improve the students’ TC knowledge and skills, and learning perceptions.","1738-9445","979-11-88428-08-3","10.23919/ICACT53585.2022.9728803","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9728803","Technology comprehension;Computational thinking;Robot-based storytelling;Information and communication technology","Education;Media;Information and communication technology;Robots;Creativity","","7","","14","","11 Mar 2022","","","IEEE","IEEE Conferences"
"Integrating Computational Thinking Into the Curricula to Bridge the Skill Gap in Engineering Education","N. Dehbozorgi; M. Nezafati; M. Roopaei","Dept. of Software Engineering, Kennesaw State University, Marietta, GA, USA; Dept. of Biomedical Engineering, Georgia Institute of Technology, Atlanta, GA, USA; Dept. of Electrical and Computer Engineering), University of Wisconsin-Platteville, Platteville, WI, USA",2024 IEEE Frontiers in Education Conference (FIE),"26 Feb 2025","2024","","","1","4","This work-in-progress research-to-practice paper presents an intervention on integrating computational thinking modules into a software engineering course. The national consensus on the significance of computational thinking has prompted the expansion of related educational initiatives over the past decade. Since the definition of computational thinking by Wing in 2006, this concept has gained significant attention within the educational community. Particularly this surge of interest has led to extensive research into its conceptual foundations and subsequent integration into educational curricula since 2013. National initiatives have since emerged to incorporate computational thinking into the educational system. Furthermore, as artificial intelligence and computing systems become increasingly integrated into daily life, there is a growing demand from industries for a workforce and graduates adept at critical thinking and problem-solving. Aligned with this national movement, our study presents a two-year institutional initiative, aimed at integrating computational thinking into the software engineering program. The software engineering discipline extensively involves design thinking and problem-solving skills. However, we noticed that these higher-level skills are not imparted early in the program to teach students this method of thinking and approaching problems. To bridge this skill gap, we developed a set of computational thinking modules and integrated them into a gateway course in the software engineering program. Over two years, we implemented this intervention in an introductory-level course and evaluated its impact on students' computational thinking skills by analyzing their responses to a standard Computational Thinking Assessment survey. The results showed significant improvement in most components. These early findings underscore the effectiveness of integrating these computational thinking modules into the gateway courses, regardless of the specific course topic. A notable feature of these modules is their adaptability to diverse engineering courses, suggesting broader applicability across disciplines. Moving forward, our research aims to expand the integration of the computational thinking modules into various courses in other institutes across the nation and analyze their impact on student performance.","2377-634X","979-8-3503-5150-7","10.1109/FIE61694.2024.10892914","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10892914","Computational Thinking;Software Engineering;Engineering Education","Bridges;Surveys;Industries;Logic gates;Problem-solving;Surges;Engineering education;Artificial intelligence;Standards;Software engineering","","","","16","IEEE","26 Feb 2025","","","IEEE","IEEE Conferences"
